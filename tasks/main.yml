---
# Homebrew setup prerequisites.
- name: Get current account's username.
  shell: whoami
  register: homebrew_whoami
  changed_when: false
  always_run: true

- include: set_vars.yml

- debug:
    msg: "Installing Homebrew as user '{{ homebrew_whoami.stdout }}'"

# Check if Ruby is available
- name: Check if Ruby is installed
  shell: which ruby
  register: which_ruby
  ignore_errors: yes

- name: Install Ruby from a package on Linux
  package:
    name: ruby
    state: installed
  become: yes
  when: ansible_os_family != "Darwin" and which_ruby.rc != 0

- name: Install the 'Development tools' package group on RedHat-based systems
  yum:
    name: "@Development tools"
    state: present
  become: yes
  when: ansible_os_family == "RedHat"

- name: Make sure some prerequisites are installed on Linux
  package:
    name: "{{ item }}"
    state: installed
  with_items:
    - gcc
    - bzip2
    - make
  become: yes
  when: ansible_os_family not in ["Darwin", "RedHat"]

- name: Ensure Homebrew parent directory has correct permissions.
  file:
    path: "{{ homebrew_prefix }}"
    mode: 0775
    group: "{{ homebrew_group }}"
    state: directory
  become: yes

- name: Ensure Homebrew directory exists.
  file:
    path: "{{ homebrew_install_path }}"
    mode: 0775
    owner: "{{ homebrew_whoami.stdout }}"
    group: "{{ homebrew_group }}"
    state: directory
  become: yes

# Clone Homebrew.
- name: Ensure Homebrew is installed.
  git:
    repo: "{{ homebrew_repo }}"
    version: master
    dest: "{{ homebrew_install_path }}"
    update: no
    accept_hostkey: yes
    depth: 1

# Adjust Homebrew permissions.
- name: Ensure proper permissions on homebrew_brew_bin_path dirs.
  file:
    path: "{{ homebrew_brew_bin_path }}"
    mode: 0775
    state: directory
  become: yes

- name: Ensure proper ownership on homebrew_install_path subdirs.
  file:
    path: "{{ homebrew_install_path }}"
    state: directory
    owner: "{{ homebrew_whoami.stdout }}"
    group: "{{ homebrew_group }}"
    recurse: true
  become: yes

- name: Create the Library/Taps directory with correct permissions on Linux
  file:
    path: "{{ homebrew_install_path }}/Library/Taps"
    mode: 0775
    group: "{{ homebrew_group }}"
    state: directory
  when: ansible_os_family != "Darwin"
# Place brew binary in proper location and complete setup.
- name: Check if homebrew binary is already in place.
  stat: "path={{ homebrew_brew_bin_path }}/brew"
  register: homebrew_binary

- name: Symlink brew to homebrew_brew_bin_path
  file:
    src: "{{ homebrew_install_path }}/bin/brew"
    dest: "{{ homebrew_brew_bin_path }}/brew"
    state: link
  when: homebrew_binary.stat.exists == false
  become: yes
  when: ansible_os_family == "Darwin"

- name: Force update brew after installation.
  command: "{{ homebrew_brew_bin_path }}/brew update --force"
  when: homebrew_binary.stat.exists == false

# Tap.
- name: Ensure configured taps are tapped on Mac OS X
  homebrew_tap: "tap={{ item }} state=present"
  with_items: "{{ homebrew_taps }}"
  when: ansible_os_family == "Darwin"

- name: Ensure configured taps are tapped on Linux
  shell: "{{ homebrew_brew_bin_path }}/brew tap {{ item }}"
  with_items: "{{ homebrew_taps }}"
  when: ansible_os_family != "Darwin"

# Brew.
- name: Ensure configured homebrew packages are installed.
  homebrew:
    name: "{{ item }}"
    state: present
    path: "{{ homebrew_brew_bin_path }}"
  with_items: "{{ homebrew_installed_packages }}"

- name: Upgrade all homebrew packages (if configured).
  homebrew:
    update_homebrew: yes
    upgrade_all: yes
    path: "{{ homebrew_brew_bin_path }}"
  when: homebrew_upgrade_all_packages

# Cask (Mac OS X only)
- block:
  - name: Get list of apps installed with cask.
    command: >
      bash -l -c '{{ homebrew_brew_bin_path }}/brew cask list'
    register: homebrew_cask_list
    always_run: yes
    changed_when: false

  - name: Set old and new Caskroom paths
    set_fact:
      old_caskroom_path: /opt/homebrew-cask/Caskroom
      new_caskroom_path: /usr/local/Caskroom

  - name: "Check if the old Caskroom location {{ old_caskroom_path }} exists"
    stat:
      path: "{{ old_caskroom_path }}"
    register: old_caskroom_stat

  - name: "Check if the new Caskroom location {{ new_caskroom_path }} exists"
    stat:
      path: "{{ new_caskroom_path }}"
    register: new_caskroom_stat

  - name: "Move Caskroom from {{ old_caskroom_path }} to {{ new_caskroom_path }} if necessary"
    command: mv "{{ old_caskroom_path }}" "{{ new_caskroom_path }}"
    when: old_caskroom_stat.stat.exists and not new_caskroom_stat.stat.exists
    become: yes

  - name: Ensure proper permissions on the Caskroom directory.
    file:
      path: "{{ new_caskroom_path }}"
      mode: 0775
      state: directory
    become: yes

  - name: Ensure proper ownership on the Caskroom directory.
    file:
      path: "{{ new_caskroom_path }}"
      state: directory
      owner: "{{ homebrew_whoami.stdout }}"
      group: "{{ homebrew_group }}"
      recurse: true
    become: yes

  - name: Install configured cask applications.
    command: >
      bash -l -c '{{ homebrew_brew_bin_path }}/brew cask install {{ item }} --appdir={{ homebrew_cask_appdir }}'
    with_items: "{{ homebrew_cask_apps }}"
    when: "'{{ item }}' not in homebrew_cask_list.stdout"

  when: ansible_os_family == "Darwin"

# Brewfile.
- name: Check for Brewfile.
  stat:
    path: "{{ homebrew_brewfile_dir }}/Brewfile"
  register: homebrew_brewfile

- name: Install from Brewfile.
  command: "brew bundle chdir={{ homebrew_brewfile_dir }}"
  when: homebrew_brewfile.stat.exists and homebrew_use_brewfile
